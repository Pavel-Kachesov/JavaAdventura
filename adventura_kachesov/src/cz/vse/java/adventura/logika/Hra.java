package cz.vse.java.adventura.logika;



public class Hra implements IHra {
    private final SeznamPrikazu platnePrikazy;    // obsahuje seznam přípustných příkazů
    private final HerniPlan herniPlan;
    private boolean konecHry = false;
    private Batoh batoh;

    /**
     *  Vytváří hru a inicializuje místnosti (prostřednictvím třídy HerniPlan) a seznam platných příkazů.
     */
    public Hra() {
        herniPlan = new HerniPlan();
        batoh = new Batoh();
        platnePrikazy = new SeznamPrikazu();
        platnePrikazy.vlozPrikaz(new Help(platnePrikazy));
        platnePrikazy.vlozPrikaz(new PrikazJdi(herniPlan, this, batoh));
        platnePrikazy.vlozPrikaz(new PrikazKonec(this));

        platnePrikazy.vlozPrikaz(new PrikazSeber(herniPlan, batoh));
        platnePrikazy.vlozPrikaz(new PrikazVyhodit(batoh, herniPlan));
        platnePrikazy.vlozPrikaz(new PrikazPrehledBatohu(batoh));
        platnePrikazy.vlozPrikaz(new PrikazPouzit(herniPlan, batoh, this));
        platnePrikazy.vlozPrikaz(new PrikazPrecti(batoh, this, herniPlan));
        platnePrikazy.vlozPrikaz(new PrikazMluv(herniPlan, this));
        platnePrikazy.vlozPrikaz(new PrikazOdpovi(this, herniPlan));

    }

    /**
     *  Vrátí úvodní zprávu pro hráče.
     */
    public String vratUvitani() {
        return "Vítejte!\n" +
               "Toto je příběh o volání Ktulhu.\n" +
                " Jste mladý vyšetřovatel Edward Pierce. Jste v New Orleansu, abyste prošetřil záhadnou smrt Vašého strýce " +
                "George Gammella. Gammell byl archeologem posedlým starobylou civilizací R'lyeh a mocnou bytostí zvanou " +
                "Ktulhu.Musite zachranit svět od Ktulhu.\n"+
               "Napište 'help', pokud si nevíte rady, jak hrát dál.\n" +
                "\n"+
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⣿⣿⣿⣿⡿⠟⠟⢿⣿⡿⡿⠻⠟⠛⠛⠛⠐⠂⠈⠛⠛⠫⠹⣿⠿⠟⠿⠿⠿⠿⢿⡿⠿⠿⢿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠙⠛⠛⠉⠙⠛⠛⠛⠛⠉⠁⠀⠀⠈⠉⠀⠉⠀⠀⠀⠈⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⠿⠛⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⡤⣴⣶⣿⣶⣤⡀⠀⠀⠄⠀⠀⠁⢉⠘⠉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠻⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⣿⣿⣾⡿⠟⠛⠻⣿⣽⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⡿⠟⡿⣻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⠟⠋⠉⠉⠁⠀⠀⠀⠀⠀⠘⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⡿⢿⠀⠁⠻⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣈⣳⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣏⡏⠀⠀⠀⠀⢰⠀⠀⠀⠀⠀⠀⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢻⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⡁⠁⠀⠄⠀⠀⠀⠀⠀⢀⣠⣤⣶⣶⣶⣿⣿⣿⣿⣿⣿⣭⣯⣭⣿⣿⣿⣶⣶⣶⣦⣤⣤⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣟⣿⣤⣀⠀⢀⣾⡧⣤⣀⣀⡀⠀⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⢿⣛⣛⣻⣿⣿⣿⣿⢟⣻⠝⠋⠀⠀⠐⢶⣶⣦⣤⣤⣤⣤⣴⣾⣿⣿⣿⣷⣿⣿⣿⣳⣿⡶⠛⠛⠛⠺⢶⣀⡀⢀⣀⡤⠂⠀⠀⠀⠀⠀⠀⠀⠀⠠⠉⠊⢪⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⠁⠀⢀⣠⣴⠞⠛⠋⠉⠉⠙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠛⢋⣁⣠⣴⣾⣿⣿⣿⣿⡿⢋⣭⣾⡿⠁⠀⠀⠀⠀⠀⠀⠙⢿⣿⣷⣾⣽⣿⣿⣯⣽⣿⣟⡿⠿⠿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠺⣿⣿⣿\n" +
                "⣿⣿⣿⣿⡁⠀⣠⡾⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⡿⢟⠫⡉⣠⣤⣶⣾⣿⣿⣿⣿⣿⣿⣿⠟⣩⣾⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣷⣻⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣝⣲⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣀⠀⠀⣿⣿⣿\n" +
                "⣿⣿⣟⣿⢁⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠔⣋⣥⣮⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣡⣾⣿⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣷⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣷⣮⣖⡤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⣄⣼⣿⣿\n" +
                "⣿⣿⣿⡁⣸⠁⠀⠀⠀⠀⠀⠀⠀⢀⣠⡴⢞⣩⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢃⣼⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣧⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣵⡦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿\n" +
                "⣿⣿⠟⠀⠛⠀⠀⠀⢀⣶⣤⣴⠞⠋⣡⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢁⣾⣿⣿⣿⡟⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣇⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣕⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠈⣿⣿⣿⣿\n" +
                "⣿⣷⠀⠀⠀⠀⠀⠀⣠⡺⣟⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⣼⣿⣿⡿⣼⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣦⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢿⣿⣿\n" +
                "⣿⣿⠀⠀⢀⣠⡴⢟⣩⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⡧⣿⣿⣿⣽⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣶⣤⡀⠀⣿⣧⠹⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣝⡦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠒⣿⣿\n" +
                "⣿⣿⣶⣚⠝⣫⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣯⣻⣿⣧⢹⡄⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠋⠉⠀⠈⠉⠻⣿⣿⡄⢻⢿⣧⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⡀⠀⠀⠀⠀⠀⠀⠙⢿\n" +
                "⣿⣿⣿⣷⣿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⠋⣰⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⠰⡎⣽⣧⣹⣿⣷⣿⣄⡀⠀⠀⠀⢠⣿⣿⣟⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡟⢼⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣀⠀⠀⠀⠀⠀⣹\n" +
                "⣿⣿⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠿⣿⣿⣿⣿⣿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⢺⣿⣿⣆⡸⠳⠾⢷⣿⣿⢿⣿⣟⣶⣴⣴⠾⣿⠿⣻⠿⣶⣤⡀⠀⣠⣴⣿⣿⡿⣡⣿⡿⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣀⠀⡈⢻\n" +
                "⣿⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣦⡈⠠⣨⡶⣿⣿⣿⣿⣿⣿⡛⠁⠄⠀⠀⠘⠈⡹⣿⣾⣿⣿⢿⡟⣴⣿⢫⠃⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠟⠛⠛⠛⠛⢻⣿⣿⣽\n" +
                "⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢻⣿⣿⣾⡙⢦⡱⠾⣿⣿⣿⡿⢿⡻⠢⠀⠀⠀⠀⠀⢠⡀⠽⢿⣿⣿⣿⣾⣿⣷⢗⣽⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⢧⣄⣀⠀⠀⠀⠀⠀⣸⣿⣿\n" +
                "⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⠻⣿⣿⣿⣮⣻⣿⣿⣿⣭⣍⡓⢵⣯⣖⡂⠤⠖⣚⣩⠶⢒⣫⣽⣿⣿⠟⢋⣴⣿⡿⣹⣿⣿⣿⣿⣿⣗⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠉⠀⠀⠀⠀⠀⠉⠲⣽⠆⠀⠄⠘⢻⣿⣿\n" +
                "⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡉⢿⣿⣿⣿⡿⣿⢻⣿⣿⣿⣶⣍⠛⣹⡟⠻⠋⣤⣾⣿⣿⣿⡿⣃⣶⣿⡿⠋⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠀⠀⠀⠀⠘⣿⣿\n" +
                "⣿⣿⠗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⡹⡻⣦⠙⣿⣿⣿⣯⣿⣿⣿⣻⣿⣿⢇⣷⣳⣆⢸⣿⣿⣿⢿⣾⡻⣿⣿⡟⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿\n" +
                "⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⡿⣻⣿⣿⣿⣿⣿⣿⡀⠃⢸⣷⡘⣿⢟⣿⣟⡿⠿⢛⣿⢟⣼⡿⠿⣿⡸⣿⣿⢿⣿⠿⣻⣿⠟⣴⣿⣿⡿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⢚⣳⣾⣿⣿\n" +
                "⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠟⠉⠉⠉⠙⢿⣿⣿⢤⡋⠀⣿⡗⢁⡾⣻⣿⣿⣿⡿⣣⣾⡿⢡⣿⡌⢷⣌⠙⢿⣶⣿⣿⡻⡇⣿⣿⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢻⣯⣿⣿\n" +
                "⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⠁⠀⠀⠀⠀⠀⠀⠹⣿⣶⢣⣾⣿⣧⣿⣾⣿⣿⠟⣩⣼⣿⠏⣰⣿⡇⣾⡈⣿⣶⣄⠙⢦⣙⠻⣮⡺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣿⣿⣿\n" +
                "⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣷⣿⣥⣿⣷⣿⣿⢏⡎⣿⣿⡏⣰⣿⣿⢠⣿⡃⢸⣿⣿⣷⣤⡈⠳⣜⣷⣜⠿⣿⣿⡿⠛⠛⠿⢿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣄⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿\n" +
                "⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⢀⠀⠀⠀⠀⠀⠀⢸⡿⣿⡿⣣⣟⡿⣿⡿⣾⣷⣿⣿⡇⢿⣿⣿⡜⣿⡼⢸⣿⣿⣯⡻⣿⣷⡌⢻⣿⣿⡹⡏⠀⠀⠀⠀⠀⠈⢻⣿⠀⠀⠀⠀⠀⠀⠀⢀⣀⡤⠤⠶⠛⢳⠀⢣⠀⠀⠀⠀⠀⠰⣾⣿⣿\n" +
                "⣿⠻⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠀⠀⠀⡼⣱⡿⣱⣿⡿⣿⣿⣧⢿⡇⣿⣿⣇⢸⣿⣟⢿⣮⣷⣇⢿⣿⣿⣷⡜⢿⣿⣯⢿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⢻⡇⠀⠀⠀⣀⣴⠾⢋⠁⠀⠀⠀⠀⠐⠀⡼⠀⠀⠀⠀⠀⠠⡈⢿⣿\n" +
                "⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠴⠶⢦⡀⠀⠀⠀⠀⠀⠀⠀⢀⠾⢚⣱⣼⢏⢟⣿⢿⣿⣿⡸⣿⣻⣿⣿⠘⣿⣿⣆⢻⣿⣿⢸⣿⣿⣿⣿⡞⣿⣿⣇⢿⣿⣿⣏⠑⠦⣄⠀⠀⠀⢈⡇⠀⠀⣼⡟⠕⠋⠉⠙⣆⠀⠀⠀⠀⡞⠁⠀⠀⠀⠀⠀⠀⣽⣾⣿\n" +
                "⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⢰⠃⢀⠠⡴⠒⢿⣦⠀⠀⠀⠀⠀⣰⠃⣰⣾⣿⠗⣡⣟⣿⣼⣿⣿⣧⢻⣿⣿⣿⣤⣿⣿⣿⣆⢻⣿⢸⣿⣿⣿⣿⣿⣼⣿⣿⡸⣿⣿⣿⣧⠀⠀⠉⠒⠖⠛⠁⠀⣾⣿⠌⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠩⣿⣿\n" +
                "⠛⠁⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⢀⣵⡟⠉⠀⠀⠀⢿⢷⡀⠀⠀⣸⠃⣼⡿⢻⡏⣼⣿⣿⣽⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⡼⣿⣼⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⠟⣿⣣⠀⠀⠀⠀⠀⠀⣸⢹⣿⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿\n" +
                "⣧⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⢠⢿⠃⣠⡴⠒⠀⠀⠘⢧⠻⣆⢠⠇⣼⡟⢁⠜⢱⣟⣿⣿⣿⣿⣿⡿⢣⣿⣿⣿⢻⣿⣿⣿⡏⣽⣿⣿⣿⣿⡫⣿⣿⣿⣿⣿⣿⡇⣿⣿⣷⡌⠻⣷⡀⠀⠀⠀⢰⣟⣏⣟⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⡼⣿\n" +
                "⣿⠃⠀⠀⠀⠀⠀⠀⠀⢹⣄⠀⣴⣧⣿⣄⣫⡉⠛⠁⠀⠀⠈⢳⣹⡿⢰⡟⠊⠀⠀⠀⣷⢿⣾⣿⣿⡿⢡⣿⣿⣿⣿⢸⣿⣿⣿⠁⣿⣿⣿⣿⡟⠇⣿⣿⣿⣿⢿⣿⢳⣿⣿⣿⡝⢦⣈⠿⣦⣀⢀⣿⣛⢿⣟⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣀⣻\n" +
                "⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣽⣿⣵⣖⠠⡈⠁⠀⠀⠀⠀⠀⠀⠙⡇⣼⠃⠀⠀⠀⢀⢿⣾⣿⣿⣿⠁⣾⣿⣿⣿⣿⢨⢿⣿⣿⡄⣿⣿⣿⣿⡟⠀⣋⣿⣿⣿⣿⣿⡼⢿⣿⣿⣿⡌⢿⣷⣤⡙⠻⢿⣷⣻⣾⣤⣤⣄⣀⣤⠶⠖⠛⠛⠛⠲⣦⡀⠀⠀⠀⠀⠀⠀⠀⣺\n" +
                "⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡇⣏⠈⠗⠈⠀⡀⠀⠀⠀⠀⠀⠀⢇⢸⢣⠀⠀⢀⢻⣪⣿⣿⣿⣿⣸⣿⣿⣿⣿⣿⡘⣸⣿⣿⢃⣿⣿⣿⣿⣿⠀⢁⣿⣿⣧⣿⡇⡇⠀⠈⢿⣿⣿⡘⣿⣿⣿⣷⣼⣿⠿⠿⠿⠿⠿⢿⣿⣿⣷⣄⢀⣀⡀⠘⣿⣄⠀⠀⠀⠠⣺⣿⣿\n" +
                "⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⡷⣫⣴⡞⠛⠳⣽⣄⠀⠀⠀⠀⠀⢸⡜⣿⠀⢠⢾⣽⣯⣻⣿⡿⡇⣿⣿⣿⣿⣿⠋⢀⣼⣿⢏⣾⣿⣿⣿⣿⣿⣇⠘⢼⣿⣿⣿⡇⡇⠀⢀⣜⣿⣿⡇⢻⣿⣬⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⣿⣿⢿⠿⣟⠛⠛⢺⣿⡆⠀⠀⠀⠉⣿⣿\n" +
                "⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⣰⣻⣾⡏⠈⠻⣗⢤⣸⡆⠁⠀⠀⠀⠀⢀⣷⡹⠚⣇⣼⣿⣿⣿⣿⣿⢹⣿⣿⣿⡟⠁⣰⣿⠟⣱⣿⣿⣿⣿⣿⣿⣿⣿⣆⠈⣿⣿⣿⣷⠰⠀⣾⣿⢿⣿⣿⢸⠁⠀⠙⣿⣿⡆⠀⠀⠀⠀⢠⡾⣿⠹⣬⡄⠀⠙⠦⣰⡿⠀⠀⠀⠀⢀⣿⣿\n" +
                "⣿⣷⠀⠀⠀⠀⠀⠀⢀⣴⡿⠹⣿⣽⡀⠀⠀⠙⢯⣷⣶⢶⣶⣶⣾⡭⠿⣷⣝⠭⣷⠟⢹⣿⣿⡏⢸⣿⣿⡟⢠⣿⡟⣡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⣿⣿⣿⣿⣧⠑⠛⣻⣻⣿⡿⣼⠄⠀⠀⣿⠛⡇⠀⠀⠀⣰⡟⠀⠈⠳⣤⣙⠂⠤⣼⣿⠁⣀⠀⠀⠀⣠⣿⣿\n" +
                "⣿⣿⠄⠀⠀⠀⠀⠀⣿⡏⠀⠀⢻⣿⣷⡄⠀⠀⠀⢱⡉⠙⠛⠛⠚⠛⠛⠛⠿⣷⣦⣶⣿⣿⢹⣿⢸⣿⡿⢰⣿⢫⣾⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⡇⢹⣿⣿⣿⣿⣧⣀⣏⡛⡿⣱⡟⠀⠀⠀⣿⢿⠿⠃⠀⠀⣿⣇⠀⠀⠀⠈⠙⠛⠛⠛⠺⢯⡁⠀⠀⣸⣿⣿⣿\n" +
                "⣿⣿⠂⠀⠀⠀⠀⠀⢻⣇⠀⠀⠀⠹⣿⣿⣶⣄⡀⢸⣇⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⡿⣹⣿⠸⣿⡎⣿⠇⣾⢣⣿⣿⣿⣿⡏⣿⠁⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⢿⣿⣿⣿⣏⣿⣴⡿⠃⠀⠀⣸⣿⢿⠀⠀⠀⠀⢻⣇⡷⡀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠈⠀⣙⣿⣿\n" +
                "⣿⣿⣇⠀⡄⠀⠀⠀⠈⢿⡀⠀⠀⠀⢘⣿⣿⣷⣯⣿⣯⡦⠤⠤⠤⣤⣴⣲⣿⣿⣿⣿⣿⣿⡇⢿⢱⣿⢰⣧⣿⣿⣿⣿⣿⡇⡏⣸⣾⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣺⡟⣿⣿⣿⠋⠀⠀⠀⠀⣴⡿⠿⠊⠀⠀⠀⠀⠀⢿⣵⢷⡠⣢⣞⣀⣀⠢⣄⠀⠀⠀⠀⢐⣿⣿⣿\n" +
                "⣿⣿⣿⡷⢀⠀⠀⠀⠀⠈⢇⠀⢀⣴⡿⠛⠻⢿⡟⠿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡷⠿⢻⣿⣿⣧⠘⣞⣿⣸⢹⣿⣿⣿⣿⣿⡇⢃⣿⣿⣿⣿⣿⣿⣿⣿⣷⢈⣿⣿⣿⡇⠈⢻⣿⣆⠀⣀⡴⢺⡽⡇⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣛⠋⠀⠀⠈⠀⠹⡄⠀⠀⠀⣿⣿⣿\n" +
                "⣿⣿⡯⠄⠀⡄⠀⠀⠀⠀⠈⠄⠸⣿⠀⠀⠀⠀⠙⠦⠀⠙⣿⣿⡿⠋⠉⠀⠀⠀⠀⣼⣿⣿⣿⣆⣿⣿⣿⣼⣿⣿⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠻⣿⣾⣿⣖⡀⢻⣿⣿⠓⠉⠉⠉⣀⡤⠴⠒⠒⣺⣿⡿⣿⣿⠉⠙⠓⢷⡀⠀⠀⠀⢀⡇⠀⠀⢈⣹⠉⣻\n" +
                "⣿⣿⣿⣏⠉⠬⠀⠀⠀⠀⠀⠀⠀⢿⣧⡀⠀⠀⠀⠀⠀⣰⣿⡿⠟⠛⠶⣄⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿⢀⢸⣿⣿⣿⣿⡿⣹⣿⣿⣿⣷⣽⠟⢽⣿⣿⣶⣿⣿⣆⠀⣠⠞⠁⠀⠀⣠⣾⡿⠋⣠⣿⡇⠀⠀⠀⠀⠙⡄⠀⠀⣼⠁⠀⠀⣾⣿⣶⣿\n" +
                "⣿⣿⣿⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣷⣄⡀⠀⠀⣸⠟⠁⠀⠀⠀⠀⢹⣧⣾⣿⣿⣿⣿⣿⣿⣟⣱⣿⣿⢹⣿⣿⣿⣿⣿⡄⢊⣿⣿⣿⣿⣷⣝⣿⡿⣿⣿⣿⣿⡎⣟⣻⠿⢓⣿⡿⣦⣿⠀⠀⢀⣼⡿⠋⢀⣴⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠸⡇⠀⠀⣀⣿⣿⣿⣿\n" +
                "⣿⣿⣿⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠙⢯⣟⣝⣻⣟⣧⡀⠀⠀⠀⣠⣾⣿⣿⣿⣧⣾⣿⣿⣿⣿⣿⢸⣿⡿⣿⣿⣿⣿⣿⣷⢈⢻⣿⣿⢿⣿⣿⡷⣿⣿⣿⣻⡿⣿⢹⣿⣿⣿⣿⣿⣿⣿⣟⣲⣺⣿⣷⣿⣿⣿⠿⢻⣷⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⢠⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣢⠀⠉⠻⣿⣷⣾⣯⣴⣖⣿⣿⡿⠉⣯⣾⣿⣛⣿⣿⣿⣿⡟⣼⣿⣿⡜⣿⣿⣿⣿⣿⣾⡈⣿⣿⣼⣿⣿⣇⠀⢸⣿⢿⣿⣻⣺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠋⠁⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠧⣦⣾⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣷⢠⡂⣠⠀⠀⠀⠀⠀⠀⠀⠈⢷⣵⣦⡾⠋⠙⠻⠿⢿⣿⣿⣿⣶⣾⡿⠟⠉⣼⣿⣿⠟⢿⣿⣿⣿⣿⣷⢹⣿⣿⣿⣿⣿⣷⡘⢿⣿⣿⣿⣿⣆⠈⣿⠀⢿⣿⡟⡿⢿⣿⣯⣵⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⡉⠀⠀⢺⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠿⠻⣿⡆⣠⣾⣿⣿⣯⠸⣿⣿⣿⣿⣿⢏⣼⣿⣿⣿⣿⣿⣿⣿⣌⠻⣿⣿⣿⣿⣿⣿⣶⣾⣿⢳⣀⠀⢈⣿⣿⢿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⡐⠀⠀⣤⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⠉⠁⠀⠀⠀⠀⣽⣿⠟⠋⠉⢻⣿⣵⣙⣛⣻⣿⣷⣿⣿⣿⣿⣿⣻⣿⣿⣿⣿⣿⣶⡹⢟⣿⣿⣟⣿⡿⢋⣾⣿⣿⣿⣿⡏⠀⠈⠛⠄⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀⢁⢁⣾⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⠄⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠟⠁⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣶⣾⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⣀⣠⠴⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠉⠛⠷⣾⣭⢿⣿⣿⣿⣿⣿⣿⠉⣿⠋⠉⠉⠀⠀⠤⣈⣿⢸⠂⠀⠀⠀⠠⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡿⠉⢻⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⠛⢿⣿⠛⢶⣿⠀⠀⠀⠀⠀⠀⠀⠙⢮⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣧⠀⠀⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⢻⣇⠈⢿⣧⠀⠀⠀⠀⠀⠀⠀⠈⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⢠⣄⡀⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣷⣴⣴⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⠀⠀⠘⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⠇⠀⢸⡇⠀⠀⠙⣷⡀⠀⠀⠀⠀⠀⠀⠈⢳⡀⠀⠀⠀⠀⠀⠀⠰⣆⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⡀⣀⡀⣀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⢠⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠋⠀⠀⢸⠁⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣳⣦⣄⣤⣦⣄⣄⣀⣼⠃⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠈⡃⠀⡀⠀⢢⣠⣤⣠⣀⣤⣰⣄⣶⣦⣶⣦⡀⢀⡀⣀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣧⣤⣤⣴⣦⣠⣀⣤⣀⣦⣤⣦⣤⣤⣤⣦⣧⣾⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "\n"+
               herniPlan.getAktualniProstor().dlouhyPopis();
    }
    
    /**
     *  Vrátí závěrečnou zprávu pro hráče.
     */
    public String vratEpilog() {
        return "Dík, že jste si zahráli.  Ahoj.";
    }
    
    /** 
     * Vrací true, pokud hra skončila.
     */
     public boolean konecHry() {
        return konecHry;
    }

    /**
     *  Metoda zpracuje řetězec uvedený jako parametr, rozdělí ho na slovo příkazu a další parametry.
     *  Pak otestuje zda příkaz je klíčovým slovem  např. jdi.
     *  Pokud ano spustí samotné provádění příkazu.
     *
     *@param  radek  text, který zadal uživatel jako příkaz do hry.
     *@return          vrací se řetězec, který se má vypsat na obrazovku
     */
     public String zpracujPrikaz(String radek) {
        String [] slova = radek.split("[ \t]+");
        String slovoPrikazu = slova[0];
        String []parametry = new String[slova.length-1];
        System.arraycopy(slova, 1, parametry, 0, parametry.length);
        String textKVypsani;
        if (platnePrikazy.jePlatnyPrikaz(slovoPrikazu)) {
            IPrikaz prikaz = platnePrikazy.vratPrikaz(slovoPrikazu);
            textKVypsani = prikaz.provedPrikaz(parametry);
        }
        else {
            textKVypsani="Nevím co tím myslíš? Tento příkaz neznám. ";
        }
        return textKVypsani;
    }
    
    
     /**
     *  Nastaví, že je konec hry, metodu využívá třída PrikazKonec,
     *  mohou ji použít i další implementace rozhraní Prikaz.
     *  
     *  @param  konecHry  hodnota false= konec hry, true = hra pokračuje
     */
    void setKonecHry(boolean konecHry) {
        this.konecHry = konecHry;
    }
    
     /**
     *  Metoda vrátí odkaz na herní plán, je využita hlavně v testech,
     *  kde se jejím prostřednictvím získává aktualní místnost hry.
     *  
     *  @return     odkaz na herní plán
     */
     public HerniPlan getHerniPlan(){
        return herniPlan;
     }
    
}

